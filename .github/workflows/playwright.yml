name: Playwright Tests

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Run type checking
      run: npm run type-check
      continue-on-error: true
    
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}
        path: screenshots/
        retention-days: 7

  mobile-test:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run Mobile Chrome tests
      run: npx playwright test --project="Mobile Chrome"
      env:
        CI: true
    
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-mobile
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  responsive-test:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
    
    - name: Run Responsive tests
      run: npm run test:responsive
      env:
        CI: true
    
    - name: Upload responsive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-responsive
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  publish-results:
    needs: [test, mobile-test, responsive-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Playwright Test Results
        path: '**/junit.xml'
        reporter: java-junit
        fail-on-error: false
    
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let summary = '## üé≠ Playwright Test Results\n\n';
          
          // Find and summarize test results
          const browsers = ['chromium', 'firefox', 'webkit', 'mobile', 'responsive'];
          
          for (const browser of browsers) {
            try {
              const reportPath = `playwright-report-${browser}/results.json`;
              if (fs.existsSync(reportPath)) {
                const results = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                const { stats } = results;
                const total = stats.total || 0;
                const passed = stats.passed || 0;
                const failed = stats.failed || 0;
                const skipped = stats.skipped || 0;
                
                const status = failed > 0 ? '‚ùå' : passed > 0 ? '‚úÖ' : '‚ö†Ô∏è';
                summary += `${status} **${browser}**: ${passed}/${total} passed`;
                if (failed > 0) summary += `, ${failed} failed`;
                if (skipped > 0) summary += `, ${skipped} skipped`;
                summary += '\n';
              }
            } catch (e) {
              summary += `‚ö†Ô∏è **${browser}**: Results not available\n`;
            }
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });